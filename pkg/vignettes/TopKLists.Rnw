\documentclass[a4paper,10pt]{article}
\usepackage[utf8x]{inputenc}
\usepackage{Sweave}
\usepackage{float}

%opening
\title{Analyzing multiple ranked lists using the package TopKLists}
%\VignetteIndexEntry{Usage of TopKLists} 
\author{Michael G. Schimek, Eva Budinska, Jie Ding, \\ Karl G. Kugler, Shili Lin and Vendula Svendova}

\begin{document}
\SweaveOpts{concordance=TRUE}

\maketitle

\tableofcontents
\newpage
\section{Introduction and background}

The ranking of distinct items has become mainstream in recent years. Examples are Web search engine results for query terms, institution league tables in higher education, preference rankings of brands, betting results in sports, results from microarray platforms in biotechnology, meta-analysis of multiple study findings in medicine, among many others. The rank position of an object or institution might be the result of measuring the strength of evidence or of assessment based on expert knowledge or preference. The assessor can be a human person or a technical device. Typically, such lists comprise thousands up to tens of thousands of items. However, only a comparably small subset of \emph{k} top-ranked items is usually informative. These are characterized by a strong overlap of their rank positions when they are ranked by several independent assessors.

There are two basic statistical tasks: (i) Identification of the top-\emph{k} most conforming items. For this task, two lists are analyzed together (multiple lists in a pairwise manner). (ii) Calculation of a consolidated top-\emph{k} sublist with a new optimized ordering of the conforming items from two or more lists. For long ranked lists, (i) is a prerequisite of (ii) because for any kind of rank aggregation the top-$k$ list lengths of the individual top-k lists need to be specified.

For these two tasks the package offers several options which can be selected from three provided modules. Some options of high practical value are supported by a graphical user interface (GUI):\\
(1) \texttt{TopKInference} provides exploratory nonparametric inference for the estimation of the top \emph{k} list length of paired rankings;
(2) \texttt{TopKSpace} provides several rank aggregation techniques (Borda, Markov chain, and Cross-entropy Monte Carlo) which allow the combination of input lists of different lengths, that may come from different underlying sets (spaces);
(3) \texttt{TopKGraphics} provides a collection of graphical tools for visualization of the inputs to and the outputs from the other modules.
In the following we illustrate the usage of these modules.


\section{Usage of TopKInference}

The nonparametric inference method of \cite{haschi} for the truncation of paired ranked lists forms the core part of the module \texttt{TopKInference}. The associated iterative algorithm, as implemented here, allows the estimation of the length, $k$, of a top-$k$ list in the presence of irregular and missing assignments. Overlap of rank positions in two input lists is represented by a sequence of indicators, where $I_j=1$ if the ranking, given by the second assessor to the object ranked $j$ by the first assessor, is not more than $\delta$ index positions distant from $j$, and otherwise $I_j=0$. The variables $I_j$ are assumed to follow a Bernoulli random distribution. This implies independence, which is motivated by $k\ll N$ and a strong random contribution due to irregular assignments in real data. However, \cite{haschi} could prove that their theoretical results obtained under the assumption of complete independence also apply to the situation of moderate $m$-dependence. Simulation study evidence (unpublished material) is in full support of these theoretical findings, more than that, even under substantial list dependence, stable truncation results can be obtained from \texttt{TopKInference}. 

A cautionary note: For making inference on pairs of ranked lists, tuning parameters have to be specified. This is for the following reason: For a given set of $N$ objects, arbitrary ranked lists can be constructed by successive permutations. However, this fact does not help in practice when we have to analyze realizations of such lists because they comprise irregularities in terms of position shifts, inverted orderings, missing assignments, etc. As a consequence, a unique top-$k$ list or a complete set of top-conforming objects does not exist. This is the reason why the truncation algorithm (and any other algorithm) in \texttt{TopKLists} needs to be controlled by tuning parameters. 
We stick to the well established notion of top-$k$ lists. Per definition, a top-$k$ list consists of $k$ items. The next index value after $k$ is $j_0$, the point of overlap degradation ($k$=$j_0$-1).

The choice of the distance parameter $\delta$ (takes the values $0, 1, 2, 3,\ldots $) is essential when the \texttt{Idata} are prepared. The $\delta$-plot of the module \texttt{TopKGraphics} was designed to help the user with the selection of $\delta$ for any pair of input lists of the same length. When this plot indicates more than one feasible non-zero $\delta$-value (in that area where the discordance is starting to degrade), preference should be given to the smallest one. There are two more tuning parameters: the constant $C$ which allows us to compensate for poor separability between the informative top parts and the remaining random parts of the input lists (the suggested interval is $0.25<C<0.6$), and the pilot sample size $\nu$ (for this smoothing parameter any positive integer value is admissible), which controls the degree of irregularity of the rankings.

The algorithmic solution of \texttt{TopKInference} for the case of more than two ranked lists is outlined in Figure \ref{topkinference}. There, the principle for the calculation of an overall index $k^\ast$ (a function of the individual $k$'s from the $\ell$ lists $L_i$; the maximum \texttt{maxK} is the default) based on all pairwise comparisons is outlined. Having obtained such an overall index, we arrive at truncated lists $T_i$. They can either be aggregated by graphical means (\texttt{aggmap} of module \texttt{TopKGraphics}) or by stochastic rank aggregation (module \texttt{TopKSpace}). Details of the approach taken for multiple lists can be found in \cite{schimybu}.

\begin{figure}
\centering
\includegraphics[width=0.5\textwidth]{TopKInferenceFlowmap.pdf}\\
\caption{The inference concept to obtain $\ell$ truncated consensual lists $T_i$ from $\ell$ full ranked lists $L_i$}
\label{topkinference}
\end{figure}

\subsection{Construction of a dataset and execution of the inference procedure}

In order to run the examples in this vignette, the TopKLists package must first be loaded:
<<eval=TRUE>>=
library(TopKLists)
@

The truncation point $j_0$ where noise takes over for a pair of ranked lists (i.e., the first index position after the end of the top-$k$ list), can be estimated for any prespecified distance $\delta$ and the selected tuning parameter values $C$ and $\nu$. It should be noted that in the R code $\delta$ is equivalent to d, $C$ to const and $\nu$ to v. For this example we simulate a dataset with an assumed top length of $k=30$. and thus truncation point of $j_0=31$.

<<>>=
k = 30
set.seed = 11
x = c(rep(1,k), rbinom(100, 1, 0.2))
@

Now let us estimate $j_0$ for different values of $\nu$ using the \texttt{compute.stream} function. It outputs a list of estimated  $j_0$ values, as well as other details of the algorithm's convergency.

<<>>=

v.vect=seq(2,length(x), by=2) #setting up a vector of $\nu$ values

resF=c()

for (v in v.vect)
 {
	res=compute.stream(x, const=0.5, v)
	resF=rbind(resF,c(v,paste(res)))
 }

colnames(resF)=c("v", "j0_est", "k","reason.break", "Js", "v.vector")
head(resF)

table(resF[,2])
@

\subsection{Visualization of the truncation results}

The following plot (Figure~\ref{j0est}) summarizes the obtained estimation results $\hat{j}_0$ for the specified range of pilot sample sizes $\nu$ and the assumed point of degeneration $j_0=31$. 

<<label=truncPlot, include=FALSE>>=
plot(resF[,1], resF[,2], pch=19, ylim=c(0, length(x)), 
xlab=substitute(nu), ylab=substitute(paste(hat(j)[0])))
abline(a=31, b=0, col="red")
lines(resF[,1], resF[,2])
@

\begin{figure}
\begin{center}
<<label=trunc,fig=TRUE,echo=FALSE>>=
<<truncPlot>>
@
\end{center}
\caption{Estimation of $j_0$ for different values of $\nu$}
\label{j0est}
\end{figure}

\section{Usage of the TopKGraphics}

The \texttt{TopKGraphics} module comprises three graphics - Deltaplot, Aggregation map and Venn-diagram.\\

\subsection{Example dataset}
\label{subsec:breastExample}

As our example, we selected three breast cancer microarray datasets (MDACC, TransBig and Pusztai) with available information on estrogen receptor positivity (ER+ vs ER-), which is one of the prognostic markers (for accession numbers see Table \ref{tab:data}):



\begin{table}[h!]
\begin{center}
\label{tab:data}
\begin{tabular}{|c|c|c|c|}
  \hline
  % after \\: \hline or \cline{col1-col2} \cline{col3-col4} ...
  NAME & PubMed ID & GEO & Reference\\ \hline
  MDACC & 20676074 & GSE20194 & \cite{shi}\\
  TransBig & 17545524 & GSE7390 & \cite{desmedt} \\
  Pusztai & 20829329 & GSE20271 & \cite{tabchy}\\
  \hline
\end{tabular}
\caption{Example dataset: names, PubMed IDs, GEO accession numbers and reference}
\end{center}
\end{table}


Each dataset was RMA normalized and a probeset with the largest variability was selected as representative of a gene symbol. Using limma, we compared differential gene expression between ER+ and ER- groups. We ordered lists according to the p-value in increasing order and selected only genes present in all three datasets, giving 917 gene symbols.
We expect ESR1 gene (gene for estrogen receptor) to be on first place between differentially expressed genes. Since ER positivity denotes two very different breast cancer groups, we expect to find similar genes in top k lists for all three datasets.

<<>>=
data(breast)
head(breast)
@


\subsection{Deltaplot}
The deltaplot is an exploratory graph, designed to help the user with selection of the distance parameter $\delta$ in the \texttt{TopKListsGUI} interface. 
The input for the moderate deviation-based inference procedure is a sequence of $I$'s, taking
either zero or one, forming a data stream representing the concordance of the paired ranks of an
object $o$. The data stream depends on some distance $\delta$. The parameter $\delta$ is defined by the shift in
index positions of a particular object $o$ in one list, say $L_i$, with respect to the other list, say $L_j$. This
means that we assume concordance (i.e. $I = 1$) for an arbitrary object characterized by rank positions
in $L_i$ versus $L_j$ , maximal $\delta$ index values apart.
For the identification of an appropriate $\delta$ in real data analysis, we use the following strategy: Compute all data streams for $\delta \in [0,1,2,\ldots,N-1]$.
Order the data stream vectors column-wise according to increasing $\delta$ values. In this way, we obtain a $N\times N$ matrix $\Delta$. The ordered sequence
of column sums (i.e. the $\sharp(0)$ for $\delta \in [0,1,2,\ldots,N-1]$) is the information we take advantage of in
the so-called \texttt{deltaplot}. It represents the reduction of discordance as a function of $\delta$. When all column
sums remain zero, complete concordance is attained. A reasonable choice of the distance parameter
is associated with a distinct decline of the $\sharp(0)$'s. Generally one should choose the $\delta$ where the rate of \texttt{deltaplot}'s decrease begins to slow noticeably. But of course, prior information about the ranking
mechanisms involved and the nature of the data is also relevant for the selection of $\delta$. 

By observing the deltaplot for the first two breast cancer dataset lists (Figure \ref{deltaplot_complete}), it is not immediately apparent which value for $\delta$ should be used. This is because there is no visible point where the \texttt{deltaplot}'s decrease changes. 

<<fig=F>>=
a=deltaplot(breast) 
@

\begin{figure}[H]
\centering
\includegraphics{deltaplot_completedataset.png}\\
\caption{Deltaplot for lists TransBig vs. MDCC} 
\label{deltaplot_complete}
\end{figure}

In the obtained \texttt{deltaplot} it can be observed that the switching of the reference list from, e.g. \texttt{TransBig} to \texttt{MDCC} or vice versa, has little impact on the graph.
In order to decide about a suitable value for $\delta$, we must limit the \texttt{deltaplot} calculation to a smaller subset of the investigated lists, for example the first 200 objects. Additionally we can use the parameter \texttt{subplot}, which magnifies a selected range of small $\delta$-values in a subplot, defined by parameter \texttt{perc.subplot}.

<<fig=F>>=
a=deltaplot(breast, deltas = 1:50, subset.lists=200, subplot = TRUE, perc.subplot=50)
@

\begin{figure}[H]
\centering
\includegraphics{deltaplot_subsetlists200.png}\\
\caption{Deltaplot for lists TransBig vs. MDCC for first 200 objects} 
\label{deltaplot_subset200}
\end{figure}

From the Figure \ref{deltaplot_subset200} we can already see, that after let's say $\delta=6$ the decrease of \texttt{deltaplot} is not as dramatical as for lower values of $\delta$. Therefore we should concentrate on results with $\delta$ set between 4 and 10. 

Calculation of the overall truncation index \texttt{maxK} for prespecified values of $\delta$ and $\nu$ is performed using the function \texttt{j0.multi}. This function takes the input lists, calculates for all pairwise list combinations \texttt{Idata} vectors of 0's and 1's and estimates the $j_0$. Finally, the \texttt{maxK} is estimated as maximum of all pairwise $k$ values. 

<<>>=
res = j0.multi(breast, d=6, v=10)
sapply(res, head)
@

In our example, for $\delta=6$ and $\nu=10$, the estimated $k$ is \texttt{maxK=14}.
 
\subsection{Aggregation map} 
The aggregation map can only be accessible via \texttt{TopKListsGUI} (see Section~\ref{subsec:resultspanel}) and can be characterized as follows: We define an index $p=1,2,\ldots$ and combine $\ell-1$ aggregation levels (groupings of truncated lists) in one display: 
For each group of $\ell-p$ truncated lists down to the smallest group consisting of just one pair of lists, we (i) select an arbitrary reference list $L^0$ under the condition that it 
comprises $\max_i(\hat{k}_i)$ items among all pairwise comparisons in the group of rankings, (ii) print the symbols of its $\max_i(\hat{k}_i)$ items vertically from the highest 
to the lowest rank position, and (iii) add the aggregation information for all remaining $\ell-p$ rankings (pairwise list combinations) in the group, ordered according to descending list length.

The aggregation information per symbol, item, and group consists of three measures represented by colored triangles and rectangles, respectively, outlined in array format: 
\begin{description}
  \item[a)] The \textbf{membership} of an individual item in the top-$k$ lists, \textit{yes} is denoted by the color `grey' and \textit{no} by the color `white'. 
  \item[b)]  The \textbf{distance} $d$ of the rank of an individual item $o\in L^0$ from its position in the other list, is denoted by a triangle color scaled from `red' \textit{identical} to 
`yellow' \textit{far distant}. An additional integer value gives the numerical distance between the item's rank positions, a negative sign means ranked lower, and a positive sign means 
ranked higher in $L$ with respect to $L^0$. 
  \item[c)] The rectangular of a symbol takes on the color `grey' when the \textbf{percentage} of $d \leq \delta$ across the columns of a group is above 
some prespecified threshold, and `white' otherwise.
\end{description}
For the aggregation map of the brest dataset example see Figure \ref{aggmap}.

\subsection{Venn diagram}
The Venn diagram can only be accessible via \texttt{TopKListsGUI} (see Section~\ref{subsec:resultspanel}).\\
The Venn diagram, and the respective Venn table, show overlaps of objects in the top-k lists of all input lists in the analysis. Asterisk highlighted objects are those from the final aggregated list as resulted from the \texttt{TopKSpace}.

\section{Usage of the TopKListsGUI}


The package \texttt{TopKLists} comprises a graphical user interface \texttt{TopKGUI} that offers applied researchers easy and straightforward access to all the functionality of \texttt{TopKInference} as well as access to the \texttt{aggmap} graphical aggregation tool contained in \texttt{TopKGraphics}. Moreover, Venn-diagrams and Venn-tables for the summary of rank aggregation results are available. 

The suite of functions supported by \texttt{TopKGUI} facilitates the exploratory analysis of multiple ranked lists. Interactive input facilities (like a slider for the dynamic specification of the distance $\delta$) allow for the real-time analysis and visualization of results, in dependence of the distance $\delta$ or the pilot sample size $\nu$ (note that, for large list lengths $N$ very large numbers of calculations must be performed and longer waiting times should be expected). For an example of the usage of \texttt{TopKGUI} in the biosciences, which in this case concerns microarray platform data, see \cite{schietal} (the GUI and \texttt{aggmap} have since been under constant revision, and the examples contained in this article may differ in look and appearance from the current version).

In order to run the examples in this vignette, the \texttt{TopKLists} package must first be loaded:

<<eval=TRUE>>=
library(TopKLists)
@


\newpage

\subsection{The graphical user interface}
To open the GUI using the example data from above, run
<<eval=FALSE>>=
TopKListsGUI(breast)
@ 
A window appears, allowing the user to perform an analysis of two or more lists.

\begin{figure}[H]
\centering
\includegraphics{TopKListsGUI-1.png}\\
\caption{Main windows of the \texttt{TopKListsGUI}
\label{topkgui}}
\end{figure}
The TopKListsGUI window is divided into four panels: Arguments, Delta-slider, Results and Analysis status.

\subsubsection{Arguments}

\begin{figure}[H]
\centering
\includegraphics{TopKListsGUI-1-Arguments.png}\\
\caption{The delta slider part of the main window of \texttt{TopKListsGUI}
\label{topkgui}}
\end{figure}

In this panel, the user is informed about the number of lists and objects in the dataset. Further he/she can set up values of variables for the top k list computation. The user selects $\nu$ (default value is 10) and choose the range of $\delta$ for which the top-$k$ lists should be calculated (default is from 0 to 10, by steps of 1). A threshold of minimum percentage of top lists comprising an object used for gray-shading in the aggregation map can be selected (default is 50). Finally, we can choose the \texttt{TopKSpace} algorithm for the generation of the aggregate list, with default algorithm of \texttt{CEMC}. This panel also contains the button Calculate, to start the analysis.


\subsubsection{Delta-slider}

\begin{figure}[H]
\centering
\includegraphics{TopKListsGUI-1-DeltaSlider.png}\\
\caption{Delta slider part of the main window of the \texttt{TopKListsGUI}
\label{topkgui}}
\end{figure}

Once the analysis is completed, the delta-slider allows to switch between results obtained under different choices of $\delta$. The moving bar shows the value of the actual $\delta$. Just left-click on the moving bar and slide to the left or right to see results for smaller or larger $\delta$ .


\subsubsection{Results panel}
\label{subsec:resultspanel}
After the analysis is completed, this part serves for the visualization of the results for the selected $\delta$ value (position of the delta-slider). Three tabs show the results as follows:

\begin{itemize}
\item{\texttt{Aggregation map}}

\begin{figure}[H]
\centering
\includegraphics{TopKListsGUI-2-Results.png}\\
\caption{Aggregation map result tab of \texttt{TopKListsGUI}
\label{aggmap}}
\end{figure}

For $\delta$ =6, the best overlap was found when comparing MDCC and Transbig to Pusztai list. The estimated k is 14, with 12 genes in top-$k$ lists of at least two datasets. In the visualization of Transbig with respect to MDCC, 10 genes are grey-shaded. Most consistent are the ESR1 and TBC1D9 genes, occupying the first two positions in all three lists (distance 0 in both MDCC and TransBig from Pusztai).

\item{\texttt{Summary table} Displays table of objects present in at least one of the top-$k$ lists, as shown in the aggregation map. The table contains object name, position of the object in each of the lists, sum of ranks, frequency in the input lists and frequency in the truncated lists. Objects with assigned `YES' in the first column were in the final selection by \texttt{CEMC} of the \texttt{TopKSpace}} (See section \ref{sec:topkspace}).

\begin{figure}[H]
\centering
\includegraphics{TopKListsGUI-2-SummaryTable.png}\\
\caption{Summary table result tab of \texttt{TopKListsGUI}
\label{topkgui}}
\end{figure}

The table is ordered in ascending order of the sum of ranks of the objects in the three lists. The first object is gene ESR1, followed by TBC1D9. Genes SCUBE2, EVL, FBP1, CIRBP and BTG2 are also consistenly present in the top-$k$ truncated lists, but at different positions. Genes FUT8, C1orf106 and QDPR are found in only two of the truncated lists and at different positions. Analogically for the rest of the genes.

\item{\texttt{Venn-diagram and Venn-table}: They show overlaps of objects in the top-$k$ lists of all input lists in the analysis. Asterisk highlighted genes are genes that form the final aggregate list as resulted from the \texttt{TopKSpace}.}

\begin{figure}[H]
\centering
\includegraphics{TopKListsGUI-2-Venn.png}\\
\caption{Venn-diagram and Venn-table result tab of \texttt{TopKListsGUI}
\label{venn}}
\end{figure}

\end{itemize}


\subsubsection{Analysis status panel}
The very bottom part of the \texttt{TopKListsGUI} shows the status of the analysis. 

\section{Usage of TopKSpace}
\label{sec:topkspace}



The idea of the module \texttt{TopKSpace} is to consolidate information from
the $l$ top-\emph{k} lists to arrive at an aggregate list ($AL$). 
As shown in Figure \ref{topkspace}, not only that the top-\emph{k} lists
($L_1, L_2, \ldots, L_l$) may be of different lengths, they may come from studies or assessments that consider different sets of objects, hence the underlying spaces ($S_1, S_2, \ldots, S_l$) from which the top-\emph{k} lists were derived may be different. The goal of the inference in \texttt{TopKSpace} is therefore to find the top-\emph{k} list, $AL$, from the aggregate new space ($\cup_{i=1}^l L_i$), such that the weighted sum of distances between each of the input lists and $AL$ will be the minimum among lists of the same length.
Two distance measures, Kendall's $\tau$ and Spearman's footrule, are available in the package. Both take the differences in the underlying spaces into account \cite{lin2010}. Three common assumptions about the underlying spaces are: {\em common-space} (all top-k lists come from a single common space), {\em platform-dependent} (using the known spaces from which the top-k lists were generated), and {\em top-k-space} (treating each top-k list as its own space). Since platform-dependent represents the true underlying scenario, it is recommended if such information is available.

There are three classes of algorithms implemented in \texttt{TopKSpace}, namely
Borda's method, Markov chain (MC) algorithms \cite{lin}, 
and a Cross Entropy Monte Carlo (CEMC) method taking advantage of the new Order Explicit Algorithm (OEA) due to \cite{linding}.
The first two consist of heuristic algorithms which do not directly optimize the objective function (i.e., minimizing the weighted distances), whereas the third class employs a Monte Carlo search procedure for achieving the optimization. Borda and Markov chain algorithms run much faster than Cross Entropy Monte Carlo, but the latter usually achieves a better result. Nevertheless, simulation studies (unpublished material)  indicate that taking the underlying space into consideration has much greater impact than using different algorithms.

\begin{figure}
\centering
\includegraphics{TopKSpaceSchema.pdf}\\
\caption{The optimization concept for the aggregation of $\ell$ full ranked lists $L_i$ into one list $AL$ under space consideration}
\label{topkspace}
\end{figure}


\subsection{Construction of three input lists and a common space}
Let us produce the following three ranked lists of different length and their common space.
<<>>=
L1=1:30
L2=c(1:10,31:40,11:15)
L3=c(1:10,16:20,11:15)
input=list(L1,L2,L3)
space=list(1:40,1:40,1:40)
@

\subsection{Calling the functions}
\subsubsection{Run four Borda algorithms}
Four Borda's scores are implemented in the Borda function in TopKSpace: arithmetic mean (ARM), median (MED),
geometric mean (GEO), and l2-norm (l2N). The output is a list with two elements, one
gives the aggregate rankings and the other provides the corresponding scores. \\
\\[2ex]
\textbf{Call with platform dependent assumption}
<<>>=
bb1=Borda(input,space)
@
\textbf{Call with top-\emph{k}-space assumption}
<<>>=
bb2=Borda(input,input)
@

The results from these two runs are expected to be different because the assumed 
underlying spaces are different.
\\[2ex]
\textbf{Plotting Borda's scores}\\
Plotting Borda's scores against ranking can frequently reveal when information for
ranking starts to diminish. For example, in Figure 12, we can see that, for the
platform-dependent approach, there is a big gap in the Borda scores in the rankings
from 10-11,
and the changes of scores also slow down (this can be similarly observed
 for the scores under the top-k space assumption) for the lowly ranked items, 
signaling degradation of information.

<<label=bordaPlot, include=FALSE>>=
plot(1:30,bb1[[2]][1:30,1], type="o", col="red", pch=1, lty=2,xlab="Ranking",
ylab="Borda's score", sub=("(a)"))
lines(1:30,bb1[[2]][1:30,2], type="o", col="red", pch=2,lty=2)
lines(1:30,bb1[[2]][1:30,3], type="o", col="red", pch=3,lty=2)
lines(1:30,bb2[[2]][1:30,1], type="o", col="blue", pch=1,lty=4)
lines(1:30,bb2[[2]][1:30,2], type="o", col="blue", pch=2,lty=4)
lines(1:30,bb2[[2]][1:30,3], type="o", col="blue", pch=3,lty=4)
legend(18,10,legend=c("Platform depend.", "Top-k spaces"), col=c("red","blue"),
lty=c(2,4))
legend(22,6,legend=c("ARM", "MED", "GEO"), pch=1:3)
@

\begin{figure}
\begin{center}
<<label=borda,fig=TRUE,echo=FALSE>>=
<<bordaPlot>>
@
\end{center}
\caption{Borda scores}
\label{borda}
\end{figure}
[2ex]
\textbf{Run three MC algorithms}\\
Three Markov Chain (MC) algorithms are implemented in the function trans.matrix in
TopKSpace: MC1 (spam sensitive), 
MC2 (majority rule), and MC3 (proportional). Among them, MC3 may be more appropriate 
for multi-platform omics problems given the potential unique features of each 
data type. 
The output of trans.matrix is a list, with the last three elements being the transition matrices
for MC1, MC2, and MC3. The output for each MC 
can then be used as input to the MC.ranks function,
which returns the stationary probability and the rankings, as shown in
the following examples.
\\[2ex] 
\textbf{Call with platform dependence assumption}
<<>>=
mm=trans.matrix(input,space)
MC1=MC.ranks(mm[[2]],mm[[4]])
probMC1=rev(sort(MC1[[2]]))[1:30] 
MC2=MC.ranks(mm[[2]],mm[[5]])
probMC2=rev(sort(MC2[[2]]))[1:30]
MC3=MC.ranks(mm[[2]],mm[[6]])
probMC3=rev(sort(MC3[[2]]))[1:30]
@
\textbf{Call with the top-$k$ space assumption}
<<>>=
mm=trans.matrix(input,input)
MC11=MC.ranks(mm[[2]],mm[[4]])
probMC11=rev(sort(MC11[[2]]))[1:30]
MC21=MC.ranks(mm[[2]],mm[[5]])
probMC21=rev(sort(MC21[[2]]))[1:30]
MC31=MC.ranks(mm[[2]],mm[[6]])
probMC31=rev(sort(MC31[[2]]))[1:30]
@
\textbf{Generating the plot of equilibrium probabilities}\\
Plot of the ordered stationary probabilities versus ranking contains useful information
regarding the relative rankings of elements. 
 For example, in Figure 13, we can see that, other than MC2 under 
the platform-dependent assumption, there appears to be limited information for 
ranking elements beyond the top 10, fairly consistent with what we saw in the Borda 
plot.
<<label=equil, include=FALSE>>=
plot(1:30,probMC1, type="o", col="red", lty=2, pch=1, xlab="Ranking",
ylab="Stationary probability", sub=("(b)"))
lines(1:30,probMC2, type="o", col="red", pch=2, lty=2)
lines(1:30,probMC3, type="o", col="red", pch=3, lty=2)
lines(1:30,probMC11, type="o", col="blue", pch=1, lty=4)
lines(1:30,probMC21, type="o", col="blue", pch=2, lty=4)
lines(1:30,probMC31, type="o", col="blue", pch=3, lty=4)
legend(18,0.14,legend=c("Platform depend.", "Top-k space"), col=c("red","blue"),
lty=c(2,4))
legend(22,0.115,legend=c("MC1", "MC2", "MC3"), pch=1:3)
@


\begin{figure}
\begin{center}
<<label=equil,fig=TRUE,echo=FALSE>>=
<<equil>>
@
\end{center}
\caption{Equilibrium probabilities}
\label{equil}
\end{figure}


\subsubsection{Run CEMC algorithm}
There are a number of tuning parameters that can be set to run the OEA efficiently.
The default in the CEMC function in TopKSpace constitutes a generic set of 
values that seem to work well for a couple of examples, but it is always a good idea
to run OEA with multiple sets of tuning parameters to increase the chance of finding 
the global maximum; see \cite{linding} for some recommendations on how to set these 
parameters. The output of CEMC contains the input tuning parameter for checking 
purpose. It also contains the aggregate top-k ranking and the probability matrix
from which the top-k ranking is obtained.  
\\[2ex]
\textbf{Call with platform-dependence assumption}
<<>>=
set.seed(1234)
pd = CEMC(input, 30, space=space, N=2000)
pd$topK
pd$p[1:5,1:5] 
@
From the above submatrix, one can see that item one is ranked no.1, since the probability vector in the first column for item one is almost 1, but very small for the rest of the items. Similarly, item 2 is ranked no.2, etc.
<<>>=
pd$input.par
@

\textbf{Call with top-\emph{k} assumption}
<<>>=
pd = CEMC(input, 30, space=input, N=2000)
pd$topK
pd$p[1:5,1:5]
@
Note that the 5th item is no longer ranked no.5, different from the platform-dependent results.


\subsection{Comparison of the performance of the different algorithms}
The modified Kendall's $\tau$ distance between the aggregate list and the input lists can be used to evaluate the relative performance of the algorithms.
In the following we give two examples: the first one is under the assumption of 
platform-dependent and Borda ARM algorithm; the second one is under the assumption of top-\emph{k} space and MC3.  


<<>>=
kc.ARM=KendallCriterion(input, space, bb1[[1]][, 1], p = 0.5,
w = c(2/(30 * (30 - 1)), 2/(25 * (25 - 1)), 2/(20 * (20 -+ 1))))
kc.ARM
@

<<>>=
kc.MC3=KendallCriterion(input, input, MC31[[3]],
p = 0.5, w = c(2/(30 * (30 - 1)), 2/(25 * (25 - 1)), 2/(20 *
(20 - 1))))
kc.MC3
@



\subsection{CEMC on breast cancer example dataset}
Cross Entropy Monte Carlo method applied on the breast cancer dataset (introduced in Section~\ref{subsec:breastExample}):
<<>>=
data(breast)
@
Calculate the \texttt{k} using function \texttt{j0.multi}
<<>>=
res = j0.multi(breast, d=6, v=10)
res$maxK
@
Each of the three lists is truncated to the 14 mostly highly ranked genes. The set of genes contained in each list is not identical and each list can contain a different set of 14 top genes. Since each of the top-14 gene lists come from the common set of 917 genes, one way to set the common underlying space, without loss of information, is to make it to be the set of all the genes present in these 3 truncated lists. In our case there are 22 unique genes.
<<>>=
topK = as.list(breast[1:res$maxK, ])
topK
uniq=unique(factor(c(as.character(topK$TransBig), as.character(topK$MDCC), as.character(topK$Pusztai))))
length(uniq)
space = list(uniq, uniq, uniq)
pd = CEMC(topK, res$maxK, space)
pd$topK
@


\begin{thebibliography}{}

\bibitem[Desmedt et al. 2007]{desmedt} Desmedt C., Piette F., Loi S., Wang Y. et al. (2007). Strong time dependence of the 76-gene prognostic signature for node-negative breast cancer patients in the TRANSBIG multicenter independent validation series. \emph{Clin Cancer Res} 1;13(11):3207-14. PMID: 17545524.

\bibitem[Hall and Schimek, 2012]{haschi} Hall, P. and Schimek, M. G. (2012).  Moderate deviation-based inference for random degeneration in paired rank lists. \emph{J. Amer. Statist. Assoc.}, \textbf{107}, 661-672.

\bibitem[Lin and Ding, 2009]{linding} Lin, S. and Ding, J. (2009). Integration of ranked lists via Cross Entropy Monte Carlo with applications to mRNA and microRNA studies. \emph{Biometrics}, \textbf{65}, 9-18.

\bibitem[Lin, 2010a]{lin2010} Lin, S. (2010a). Space oriented rank-based data integration. \emph{Statistical Applications in Genetics and Molecular Biology}, \textbf{9}, Article 20.

\bibitem[Lin, 2010b]{lin} Lin, S. (2010b). Rank aggregation methods. \emph{Wiley Interdisciplinary Reviews: Computational Statistics}, \textbf{2}, 555–570.

\bibitem[Schimek, My\v{s}i\v{c}kov\'{a} and Budinsk\'{a}, 2012]{schimybu} Schimek, M. G., My\v{s}i\v{c}kov\'{a}, A. and Budinsk\'{a}, E. (2012). An inference and integration approach for the consolidation of ranked lists. \emph{Communications in Statistics - Simulation and Computation}, \textbf{41:7}, 1152-1166.

\bibitem[Shi et al. 2010]{shi} Shi L., Campbell G., Jones W.D., Campagne F. et al. (2010). The MicroArray Quality Control (MAQC)-II study of common practices for the development and validation of microarray-based predictive models. \emph{Nat Biotechnol};28(8):827-38. PMID: 20676074.

\bibitem[Tabchy et al. 2010]{tabchy} Tabchy A., Valero V., Vidaurre T., Lluch A. et al. (2010). Evaluation of a 30-gene paclitaxel, fluorouracil, doxorubicin, and cyclophosphamide chemotherapy response predictor in a multicenter randomized trial in breast cancer. \emph{Clin Cancer Res} 1;16(21):5351-61. PMID: 20829329
 
%% \bibitem[Karn et al. 2011]{karn2011} Karn T., Pusztai L., Holtrich U., Iwamoto T. et al. (2011). Homogeneous datasets of triple negative breast cancers enable the identification of novel prognostic and predictive signatures. \emph{PLoS One}; 6(12):e28403. PMID: 22220191.

%% \bibitem[Karn et al. 2012]{karn2012} Karn T., Pusztai L., Ruckhäberle E., Liedtke C. et al. (2012). Melanoma antigen family A identified by the bimodality index defines a subset of triple negative breast cancers as candidates for immune response augmentation. \emph{Eur J Cancer}; 48(1):12-23. PMID: 21741824.

%% \bibitem[Popovici et al. 2010]{popovici} Popovici V., Chen W., Gallas B.G., Hatzis C. et al. (2010). Effect of training-sample size and classification difficulty on the accuracy of genomic predictors. \emph{Breast Cancer Res};12(1):R5. PMID: 20064235.

%% \bibitem[Rody et al. 2011]{rody} Rody A., Karn T., Liedtke C., Pusztai L. et al. (2011). A clinically relevant gene signature in triple negative and basal-like breast cancer. \emph{Breast Cancer Res} 6;13(5):R97. PMID: 21978456.

\end{thebibliography}


\section*{Session info}
<<>>=
sessionInfo()
@


\end{document}

